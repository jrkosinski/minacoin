{
  "_from": "ramda",
  "_id": "ramda@0.26.1",
  "_inBundle": false,
  "_integrity": "sha512-hLWjpy7EnsDBb0p+Z3B7rPi3GDeRG5ZtiI33kJhTt+ORCd38AbAIjB/9zRIUoeTbE/AVX5ZkU7m6bznsvrf8eQ==",
  "_location": "/ramda",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ramda",
    "fetchSpec": "latest",
    "name": "ramda",
    "raw": "ramda",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ramda/-/ramda-0.26.1.tgz",
  "_shasum": "8d41351eb8111c55353617fc3bbffad8e4d35d06",
  "_spec": "ramda",
  "_where": "/home/acer/Desktop/coinmonks",
  "author": {
    "email": "scott@sauyet.com",
    "name": "Scott Sauyet",
    "url": "scott.sauyet.com"
  },
  "bugs": {
    "url": "https://github.com/ramda/ramda/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Michael Hurley",
      "email": "mh@buzzdecafe.com",
      "url": "http://buzzdecafe.com"
    },
    {
      "name": "Scott Sauyet",
      "email": "scott@sauyet.com",
      "url": "http://fr.umio.us"
    },
    {
      "name": "David Chambers",
      "email": "dc@davidchambers.me",
      "url": "http://davidchambers.me"
    },
    {
      "name": "Graeme Yeates",
      "email": "yeatesgraeme@gmail.com",
      "url": "https://github.com/megawac"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "A practical functional library for JavaScript programmers.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-annotate-pure-calls": "^0.2.2",
    "babel-plugin-import-export-rename": "^1.0.1",
    "babel-register": "^6.26.0",
    "babel-types": "^6.26.0",
    "babelify": "^8.0.0",
    "benchmark": "~1.0.0",
    "browserify": "https://api.github.com/repos/browserify/browserify/tarball/9ff7c55cc67a7ddbc64f8e7270bcd75fcc72ce2f",
    "cli-table": "0.3.x",
    "cross-env": "^2.0.1",
    "dox": "latest",
    "envvar": "1.x.x",
    "eslint": "^5.9.0",
    "handlebars": ">=4.0.0",
    "istanbul": "^0.4.x",
    "js-yaml": "^3.12.0",
    "jsverify": "^0.7.3",
    "mocha": "^5.2.0",
    "ramda": "0.17.x",
    "rimraf": "^2.6.2",
    "rollup": "^0.50.0",
    "rollup-plugin-terser": "^1.0.1",
    "sanctuary": "0.7.x",
    "sinon": "^1.17.4",
    "testem": "^2.9.0",
    "xyz": "^3.0.0"
  },
  "files": [
    "dist",
    "es",
    "src"
  ],
  "homepage": "https://ramdajs.com/",
  "jsdelivr": "dist/ramda.min.js",
  "keywords": [
    "curried",
    "fantasy-land",
    "fp",
    "functional",
    "point-free",
    "pure",
    "ramda",
    "tacit",
    "toolkit",
    "utilities",
    "utils"
  ],
  "license": "MIT",
  "main": "src/index",
  "module": "es/index.js",
  "name": "ramda",
  "optionalDependencies": {},
  "readme": "Ramda\n=============\n\nA practical functional library for JavaScript programmers.\n\n[![Build Status](https://travis-ci.org/ramda/ramda.svg?branch=master)](https://travis-ci.org/ramda/ramda)\n[![npm module](https://badge.fury.io/js/ramda.svg)](https://www.npmjs.org/package/ramda)\n[![dependencies](https://david-dm.org/ramda/ramda.svg)](https://david-dm.org/ramda/ramda)\n[![Gitter](https://badges.gitter.im/Join_Chat.svg)](https://gitter.im/ramda/ramda?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n\nWhy Ramda?\n----------\n\n<img src=\"https://ramdajs.com/ramdaFilled_200x235.png\" \n     width=\"170\" height=\"190\" align=\"right\" hspace=\"12\" />\n\nThere are already several excellent libraries with a functional flavor. Typically, they are meant to be general-purpose toolkits, suitable for working in multiple paradigms. Ramda has a more focused goal. We wanted a library designed specifically for a functional programming style, one that makes it easy to create functional pipelines, one that never mutates user data. \n\n\n\nWhat's Different?\n-----------------\n\nThe primary distinguishing features of Ramda are:\n\n* Ramda emphasizes a purer functional style. Immutability and side-effect free functions \n  are at the heart of its design philosophy. This can help you get the job done with simple, \n  elegant code.\n\n* Ramda functions are automatically curried. This allows you to easily build up new functions \n  from old ones simply by not supplying the final parameters.\n\n* The parameters to Ramda functions are arranged to make it convenient for currying. The data \n  to be operated on is generally supplied last.\n\nThe last two points together make it very easy to build functions as sequences of simpler functions, each of which transforms the data and passes it along to the next. Ramda is designed to support this style of coding.\n\n\n\nIntroductions\n-------------\n\n* [Introducing Ramda](http://buzzdecafe.github.io/code/2014/05/16/introducing-ramda) by Buzz de Cafe\n* [Why Ramda?](http://fr.umio.us/why-ramda/) by Scott Sauyet\n* [Favoring Curry](http://fr.umio.us/favoring-curry/) by Scott Sauyet\n* [Why Curry Helps](https://hughfdjackson.com/javascript/why-curry-helps/) by Hugh Jackson\n* [Hey Underscore, You're Doing It Wrong!](https://www.youtube.com/watch?v=m3svKOdZijA&app=desktop) by Brian Lonsdorf\n* [Thinking in Ramda](http://randycoulman.com/blog/categories/thinking-in-ramda) by Randy Coulman\n\n\n\nPhilosophy\n----------\nUsing Ramda should feel much like just using JavaScript.\nIt is practical, functional JavaScript. We're not introducing\nlambda expressions in strings, we're not borrowing consed \nlists, we're not porting over all of the Clojure functions.\n\nOur basic data structures are plain JavaScript objects, and our\nusual collections are JavaScript arrays. We also keep other\nnative features of JavaScript, such as functions as objects\nwith properties.\n\nFunctional programming is in good part about immutable objects and \nside-effect free functions. While Ramda does not *enforce* this, it\nenables such style to be as frictionless as possible.\n\nWe aim for an implementation both clean and elegant, but the API is king.\nWe sacrifice a great deal of implementation elegance for even a slightly\ncleaner API.\n\nLast but not least, Ramda strives for performance. A reliable and quick\nimplementation wins over any notions of functional purity.\n\n\n\nInstallation\n------------\n\nTo use with node:\n\n```bash\n$ npm install ramda\n```\n\nThen in the console:\n\n```javascript\nconst R = require('ramda');\n```\n\nTo use directly in the browser:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.js\"></script>\n```\n\nor the minified version:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.min.js\"></script>\n```\n\nor from a CDN, either cdnjs:\n\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/ramda/0.25.0/ramda.min.js\"></script>\n```\n\nor one of the below links from [jsDelivr](http://jsdelivr.com):\n\n```html\n<script src=\"//cdn.jsdelivr.net/npm/ramda@0.25.0/dist/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/ramda@0.25/dist/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/ramda@latest/dist/ramda.min.js\"></script>\n```\n\n(note that using `latest` is taking a significant risk that ramda API changes could break your code.)\n\nThese script tags add the variable `R` on the browser's global scope.\n\nOr you can inject ramda into virtually any unsuspecting website using [the bookmarklet](https://github.com/ramda/ramda/blob/master/BOOKMARKLET.md).\n\n**Note for versions > 0.25**\nRamda versions > 0.25 don't have a default export.\nSo instead of `import R from 'ramda';`, one has to use `import * as R from 'ramda';`\nOr better yet, import only the required functions via `import { functionName } from 'ramda';`\n\n### Build\n\n`npm run build` creates `es`, `src` directories and updates both __dist/ramda.js__ and __dist/ramda.min.js__\n\n#### Partial Builds\n\nIt is possible to build Ramda with a subset of the functionality to reduce its file size. Ramda's build system supports this with command line flags. For example if you're using `R.compose`, `R.reduce`, and `R.filter` you can create a partial build with:\n\n    npm run --silent partial-build compose reduce filter > dist/ramda.custom.js\n\nThis requires having Node/io.js installed and ramda's dependencies installed (just use `npm install` before running partial build). \n\n\n\nDocumentation\n-------------\n\nPlease review the [API documentation](https://ramdajs.com/docs/).\n\nAlso available is our [Cookbook](https://github.com/ramda/ramda/wiki/Cookbook) of functions built from Ramda that you may find useful.\n\n\nThe Name\n--------\n\nOk, so we like sheep.  That's all.  It's a short name, not already \ntaken.  It could as easily have been `eweda`, but then we would be \nforced to say _eweda lamb!_, and no one wants that.  For non-English \nspeakers, lambs are baby sheep, ewes are female sheep, and rams are male \nsheep.  So perhaps ramda is a grown-up lambda... but probably not.\n\n\n\n\nRunning The Test Suite\n----------------------\n\n**Console:**\n\nTo run the test suite from the console, you need to have `mocha` installed:\n\n    npm install -g mocha\n\nThen from the root of the project, you can just call\n\n    mocha\n\nAlternately, if you've installed the dependencies, via:\n\n    npm install\n\nthen you can run the tests (and get detailed output) by running:\n\n    npm test\n\n**Browser:**\n\nYou can use [testem](https://github.com/airportyh/testem) to\ntest across different browsers (or even headlessly), with livereloading of\ntests. Install testem (`npm install -g testem`) and run `testem`. Open the\nlink provided in your browser and you will see the results in your terminal.\n\nIf you have _PhantomJS_ installed, you can run `testem -l phantomjs` to run the\ntests completely headlessly.\n\n\nUsage\n-----------------\n\nFor `v0.25` and up, import the whole library or pick ES modules directly from the library:\n\n```js\nimport * as R from 'ramda'\n\nconst {identity} = R\nR.map(identity, [1, 2, 3])\n```\n\nDestructuring imports from ramda *does not necessarily prevent importing the entire library*. You can manually cherry-pick methods like the following, which would only grab the parts necessary for `identity` to work:\n\n```js\nimport identity from 'ramda/src/identity'\n\nidentity()\n```\n\nManually cherry picking methods is cumbersome, however. Most bundlers like Webpack and Rollup offer tree-shaking as a way to drop unused Ramda code and reduce bundle size, but their performance varies, discussed [here](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples). Here is a summary of the optimal setup based on what technology you are using:\n\n1. Webpack + Babel - use [`babel-plugin-ramda`](https://github.com/megawac/babel-plugin-ramda) to automatically cherry pick methods. Discussion [here](http://www.andrewsouthpaw.com/2018/01/19/ramda-tree-shaking-not-supported-out-of-the-box/), example [here](https://github.com/AndrewSouthpaw/ramda-webpack-tree-shaking-examples/blob/master/07-webpack-babel-plugin-ramda/package.json)\n1. Webpack only - use `UglifyJS` plugin for treeshaking along with the `ModuleConcatenationPlugin`. Discussion [here](https://github.com/ramda/ramda/issues/2355), with an example setup [here](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples/blob/master/06-webpack-scope-hoisted/webpack.config.js)\n1. Rollup - does a fine job properly treeshaking, no special work needed; example [here](https://github.com/scabbiaza/ramda-webpack-tree-shaking-examples/blob/master/07-rollup-ramda-tree-shaking/rollup.config.js)\n\n\nTypings\n-----------------\n\n- [TypeScript](https://github.com/types/npm-ramda/)\n- [Flow](https://github.com/flowtype/flow-typed/tree/master/definitions/npm/ramda_v0.x.x)\n\n\n\n\nTranslations\n-----------------\n\n- [Chinese(中文)](http://ramda.cn/)\n- [Ukrainian(Українська)](https://github.com/ivanzusko/ramda)\n- [Russian(Русский)](https://github.com/Guck111/ramda)\n\n\n\nAcknowledgements\n-----------------\n\nThanks to [J. C. Phillipps](http://www.jcphillipps.com) for the Ramda logo.\nRamda logo artwork &copy; 2014 J. C. Phillipps. Licensed Creative Commons \n[CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ramda/ramda.git"
  },
  "scripts": {
    "bench": "scripts/benchRunner",
    "bookmarklet": "scripts/bookmarklet",
    "browser_test": "testem ci",
    "build": "npm run build:es && npm run build:cjs && npm run build:umd && npm run build:umd:min && npm run build:mjs",
    "build:cjs": "cross-env BABEL_ENV=cjs babel source --out-dir src",
    "build:es": "cross-env BABEL_ENV=es babel source --out-dir es",
    "build:mjs": "cross-env BABEL_ENV=es babel source/index.js --out-file src/index.mjs",
    "build:umd": "cross-env NODE_ENV=development rollup -c -o dist/ramda.js",
    "build:umd:min": "cross-env NODE_ENV=production rollup -c -o dist/ramda.min.js",
    "clean": "rimraf es/* src/* dist/* coverage/*",
    "coverage": "istanbul cover node_modules/.bin/_mocha -- --reporter spec",
    "lint": "eslint scripts/bookmarklet scripts/*.js source/*.js source/internal/*.js test/*.js test/**/*.js lib/sauce/*.js lib/bench/*.js",
    "partial-build": "node ./scripts/partialBuild",
    "prepare": "npm run clean && npm run build",
    "test": "cross-env BABEL_ENV=cjs mocha --require babel-register --reporter spec"
  },
  "sideEffects": false,
  "unpkg": "dist/ramda.min.js",
  "version": "0.26.1"
}
