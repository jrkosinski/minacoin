{"version":3,"file":"downshift.umd.min.js","sources":["../../src/set-a11y-status.js","../../node_modules/compute-scroll-into-view/es/index.js","../../src/utils.js","../../src/downshift.js"],"sourcesContent":["// istanbul ignore next\nlet statusDiv =\n  typeof document === 'undefined'\n    ? null\n    : document.getElementById('a11y-status-message')\n\nlet statuses = []\n\n/**\n * @param {String} status the status message\n */\nfunction setStatus(status) {\n  const isSameAsLast = statuses[statuses.length - 1] === status\n  if (isSameAsLast) {\n    statuses = [...statuses, status]\n  } else {\n    statuses = [status]\n  }\n  const div = getStatusDiv()\n\n  // Remove previous children\n  while (div.lastChild) {\n    div.removeChild(div.firstChild)\n  }\n\n  statuses.filter(Boolean).forEach((statusItem, index) => {\n    div.appendChild(getStatusChildDiv(statusItem, index))\n  })\n}\n\n/**\n * @param {String} status the status message\n * @param {Number} index the index\n * @return {HTMLElement} the child node\n */\nfunction getStatusChildDiv(status, index) {\n  const display = index === statuses.length - 1 ? 'block' : 'none'\n\n  const childDiv = document.createElement('div')\n  childDiv.style.display = display\n  childDiv.textContent = status\n\n  return childDiv\n}\n\n/**\n * Get the status node or create it if it does not already exist\n * @return {HTMLElement} the status node\n */\nfunction getStatusDiv() {\n  if (statusDiv) {\n    return statusDiv\n  }\n  statusDiv = document.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'assertive')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  document.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","function isElement(el) {\n  return el != null && typeof el === 'object' && (el.nodeType === 1 || el.nodeType === 11);\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart < scrollingEdgeStart && elementSize < scrollingSize || elementEdgeEnd > scrollingEdgeEnd && elementSize > scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\nexport default (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode || cursor.host;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        _height = _frame$getBoundingCli.height,\n        _width = _frame$getBoundingCli.width,\n        _top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        _left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - _top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - _left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});","import computeScrollIntoView from 'compute-scroll-into-view'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} rootNode the root element of the component\n */\nfunction scrollIntoView(node, rootNode) {\n  if (node === null) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: rootNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      fn && fn(event, ...args)\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\n/**\n * This return a function that will call all the given functions with\n * the arguments with which it's called. It does a null-check before\n * attempting to call the functions and can take any number of functions.\n * @param {...Function} fns the functions to call\n * @return {Function} the function that calls all the functions\n */\nfunction callAll(...fns) {\n  return (...args) => {\n    fns.forEach(fn => {\n      fn && fn(...args)\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({\n  isOpen,\n  highlightedItem,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    if (selectedItem) {\n      return itemToString(selectedItem)\n    } else {\n      return ''\n    }\n  }\n  const resultCountChanged = resultCount !== previousResultCount\n  if (!resultCount) {\n    return 'No results.'\n  } else if (!highlightedItem || resultCountChanged) {\n    return `${resultCount} ${\n      resultCount === 1 ? 'result is' : 'results are'\n    } available, use up and down arrow keys to navigate.`\n  }\n  return itemToString(highlightedItem)\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (element.nodeName) {\n    // then this is preact\n    return typeof element.nodeName === 'string'\n  } else {\n    // then we assume this is react\n    return typeof element.type === 'string'\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n  return element.props || /* istanbul ignore next (preact) */ element.attributes\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  throw new Error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  callAll,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  isOrContainsNode,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n}\n","/* eslint camelcase:0 */\n\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport preval from 'preval.macro'\nimport setA11yStatus from './set-a11y-status'\nimport {\n  cbToCb,\n  callAll,\n  callAllEventHandlers,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  isOrContainsNode,\n  getElementProps,\n  noop,\n  requiredProp,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSelectedItem: PropTypes.any,\n    defaultInputValue: PropTypes.string,\n    defaultIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultSelectedItem: null,\n    defaultInputValue: '',\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n  }\n\n  static stateChangeTypes = {\n    unknown: '__autocomplete_unknown__',\n    mouseUp: '__autocomplete_mouseup__',\n    itemMouseEnter: '__autocomplete_item_mouseenter__',\n    keyDownArrowUp: '__autocomplete_keydown_arrow_up__',\n    keyDownArrowDown: '__autocomplete_keydown_arrow_down__',\n    keyDownEscape: '__autocomplete_keydown_escape__',\n    keyDownEnter: '__autocomplete_keydown_enter__',\n    clickItem: '__autocomplete_click_item__',\n    blurInput: '__autocomplete_blur_input__',\n    changeInput: '__autocomplete_change_input__',\n    keyDownSpaceButton: '__autocomplete_keydown_space_button__',\n    clickButton: '__autocomplete_click_button__',\n    blurButton: '__autocomplete_blur_button__',\n    controlledPropUpdatedSelectedItem:\n      '__autocomplete_controlled_prop_updated_selected_item__',\n    touchStart: '__autocomplete_touchstart__',\n  }\n\n  constructor(props) {\n    super(props)\n    const state = this.getState({\n      highlightedIndex: this.props.defaultHighlightedIndex,\n      isOpen: this.props.defaultIsOpen,\n      inputValue: this.props.defaultInputValue,\n      selectedItem: this.props.defaultSelectedItem,\n    })\n    if (state.selectedItem != null) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * This will perform a shallow merge of the given state object\n   * with the state coming from props\n   * (for the controlled component scenario)\n   * This is used in state updater functions so they're referencing\n   * the right state regardless of where it comes from.\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return Object.keys(stateToMerge).reduce((state, key) => {\n      state[key] = this.isControlledProp(key)\n        ? this.props[key]\n        : stateToMerge[key]\n      return state\n    }, {})\n  }\n\n  /**\n   * This determines whether a prop is a \"controlled prop\" meaning it is\n   * state which is controlled by the outside of this component rather\n   * than within this component.\n   * @param {String} key the key to check\n   * @return {Boolean} whether it is a controlled controlled prop\n   */\n  isControlledProp(key) {\n    return this.props[key] !== undefined\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => (this.itemCount = count)\n  unsetItemCount = () => (this.itemCount = null)\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (preval`module.exports = process.env.BUILD_REACT_NATIVE !== 'true'`) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      scrollIntoView(node, this._rootNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    if (this.getState().isOpen) {\n      this.changeHighlightedIndex(amount, otherStateToSet)\n    } else {\n      this.setHighlightedIndex(undefined, {isOpen: true, ...otherStateToSet})\n    }\n  }\n\n  changeHighlightedIndex(moveAmount, otherStateToSet) {\n    const itemsLastIndex = this.getItemCount() - 1\n    if (itemsLastIndex < 0) {\n      return\n    }\n    const {highlightedIndex} = this.getState()\n    let baseIndex = highlightedIndex\n    if (baseIndex === null) {\n      baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n    }\n    let newIndex = baseIndex + moveAmount\n    if (newIndex < 0) {\n      newIndex = itemsLastIndex\n    } else if (newIndex > itemsLastIndex) {\n      newIndex = 0\n    }\n    this.setHighlightedIndex(newIndex, otherStateToSet)\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        isOpen: false,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: false,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.isControlledProp('selectedItem')\n          ? this.props.defaultInputValue\n          : this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/paypal/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type =\n          newStateToSet.type || Downshift.stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!this.isControlledProp(key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: this.rootRef,\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? 5 : 1\n      this.moveHighlightedIndex(amount, {\n        type: Downshift.stateChangeTypes.keyDownArrowDown,\n      })\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? -5 : -1\n      this.moveHighlightedIndex(amount, {\n        type: Downshift.stateChangeTypes.keyDownArrowUp,\n      })\n    },\n\n    Enter(event) {\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: Downshift.stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({type: Downshift.stateChangeTypes.keyDownEscape})\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: Downshift.stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = preval`module.exports = process.env.BUILD_REACT_NATIVE === 'true'`\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.button_handleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.button_handleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.button_handleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.button_handleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.button_handleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  button_handleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  button_handleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  button_handleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      this.props.environment.document.activeElement ===\n      this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: Downshift.stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: Downshift.stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  button_handleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: Downshift.stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (preval`module.exports = process.env.BUILD_PREACT === 'true'`) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.input_handleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.input_handleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.input_handleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (preval`module.exports = process.env.BUILD_REACT_NATIVE === 'true'`) {\n      eventHandlers = {\n        ...eventHandlers,\n        onChangeText: callAllEventHandlers(\n          onChangeText,\n          onInput,\n          this.input_handleTextChange,\n        ),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  input_handleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.keyDownHandlers[key]) {\n      this.keyDownHandlers[key].call(this, event)\n    }\n  }\n\n  input_handleChange = event => {\n    this.internalSetState({\n      type: Downshift.stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: preval`module.exports = process.env.BUILD_REACT_NATIVE === 'true'`\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n    })\n  }\n\n  input_handleTextChange /* istanbul ignore next (react-native) */ = text => {\n    this.internalSetState({\n      type: Downshift.stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: text,\n    })\n  }\n\n  input_handleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document.activeElement.dataset.toggle &&\n        (this._rootNode &&\n          this._rootNode.contains(\n            this.props.environment.document.activeElement,\n          ))\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: Downshift.stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => (this._menuNode = node)\n\n  getMenuProps = ({refKey = 'ref', ref, ...props} = {}) => {\n    return {\n      [refKey]: callAll(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = preval`module.exports = process.env.BUILD_REACT_NATIVE === 'true'`\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = preval`module.exports = process.env.BUILD_REACT_NATIVE === 'true'`\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: Downshift.stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: Downshift.stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().selectedItem === item,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: false,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {isOpen: !isOpen, ...otherStateToSet}\n      },\n      () => {\n        const {isOpen} = this.getState()\n        if (isOpen) {\n          // highlight default index\n          this.setHighlightedIndex(undefined, otherStateToSet)\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (preval`module.exports = process.env.BUILD_REACT_NATIVE === 'true'`) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      const targetWithinDownshift = (target, checkActiveElement = true) => {\n        const {document} = this.props.environment\n        return [this._rootNode, this._menuNode].some(\n          contextNode =>\n            contextNode &&\n            (isOrContainsNode(contextNode, target) ||\n              (checkActiveElement &&\n                isOrContainsNode(contextNode, document.activeElement))),\n        )\n      }\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(event.target)\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: Downshift.stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      const onTouchStart = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          false,\n        )\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: Downshift.stateChangeTypes.touchStart}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n\n      this.props.environment.addEventListener('mousedown', onMouseDown)\n      this.props.environment.addEventListener('mouseup', onMouseUp)\n      this.props.environment.addEventListener('touchstart', onTouchStart)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        this.props.environment.removeEventListener('mousedown', onMouseDown)\n        this.props.environment.removeEventListener('mouseup', onMouseUp)\n        this.props.environment.removeEventListener('touchstart', onTouchStart)\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.isControlledProp('selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: Downshift.stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    const current =\n      this.props.highlightedIndex === undefined ? this.state : this.props\n    const prev =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n\n    if (\n      current.highlightedIndex !== prev.highlightedIndex &&\n      !this.avoidScrolling\n    ) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (preval`module.exports = process.env.BUILD_REACT_NATIVE !== 'true'`) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n    if (this.getRootProps.called) {\n      if (!this.getRootProps.suppressRefError) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return React.cloneElement(\n        element,\n        this.getRootProps(getElementProps(element)),\n      )\n    } else {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must use apply the getRootProps function',\n      )\n    }\n  }\n}\n\nexport default Downshift\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified) {\n    throw new Error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    throw new Error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!getElementProps(element)[refKey]) {\n    throw new Error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n"],"names":["statusDiv","document","getElementById","statuses","setStatus","status","isSameAsLast","length","div","createElement","setAttribute","assign","style","body","appendChild","getStatusDiv","lastChild","removeChild","firstChild","filter","Boolean","forEach","statusItem","index","display","childDiv","textContent","getStatusChildDiv","isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","overflowY","overflowX","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","target","options","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","parentNode","host","push","viewportWidth","window","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","_target$getBoundingCl","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","frame","_frame$getBoundingCli","_height","_width","_top","_left","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","idCounter","cbToCb","cb","noop","isOrContainsNode","parent","child","contains","callAllEventHandlers","fns","event","args","some","fn","preventDownshiftDefault","hasOwnProperty","nativeEvent","unwrapArray","arg","defaultValue","Array","isArray","isDOMElement","element","nodeName","type","getElementProps","props","attributes","stateKeys","pickState","state","result","k","normalizeArrowKey","key","keyCode","indexOf","Downshift","_Component","_this","getState","defaultHighlightedIndex","defaultIsOpen","defaultInputValue","defaultSelectedItem","selectedItem","inputValue","itemToString","internalClearTimeouts","timeoutIds","id","stateToMerge","this","Object","keys","reduce","_this2","isControlledProp","undefined","getItemCount","itemCount","items","getItemNodeFromIndex","environment","getItemId","scrollHighlightedItemIntoView","rootNode","computeScrollIntoView","highlightedIndex","_rootNode","moveHighlightedIndex","amount","otherStateToSet","isOpen","changeHighlightedIndex","setHighlightedIndex","moveAmount","itemsLastIndex","baseIndex","newIndex","getStateAndHelpers","getRootProps","getToggleButtonProps","getLabelProps","getMenuProps","getInputProps","getItemProps","openMenu","closeMenu","toggleMenu","selectItem","selectItemAtIndex","selectHighlightedItem","clearSelection","clearItems","reset","setItemCount","unsetItemCount","internalSetState","componentDidMount","targetWithinDownshift","checkActiveElement","_this3","_menuNode","contextNode","activeElement","onMouseDown","isMouseDown","onMouseUp","stateChangeTypes","mouseUp","onOuterClick","onTouchStart","touchStart","addEventListener","cleanup","updateStatus","cancel","removeEventListener","componentDidUpdate","prevProps","prevState","selectedItemChanged","controlledPropUpdatedSelectedItem","current","prev","avoidScrolling","componentWillUnmount","render","children","called","refKey","suppressRefError","refKeySpecified","isComposite","Error","React","cloneElement","Component","defaultProps","highlightedItem","resultCount","previousResultCount","i","String","prevItem","item","stateToSet","menuId","labelId","inputId","_this4","input","internalSetTimeout","time","setTimeout","count","itemIndex","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","setState","newStateToSet","stateReducer","nextState","nextFullState","unknown","onStateChange","onSelect","onChange","onUserAction","rootRef","rest","role","keyDownHandlers","preventDefault","shiftKey","keyDownArrowDown","keyDownArrowUp","itemNode","hasAttribute","keyDownEnter","keyDownEscape","buttonKeyDownHandlers","keyDownSpaceButton","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","button_handleClick","button_handleKeyDown","button_handleKeyUp","button_handleBlur","eventHandlers","disabled","call","focus","clickButton","blurTarget","blurButton","htmlFor","onInput","onChangeText","input_handleChange","input_handleKeyDown","input_handleBlur","changeInput","value","input_handleTextChange","text","downshiftButtonIsActive","dataset","toggle","blurInput","menuRef","ref","callAll","onMouseMove","fnName","propName","requiredProp","customClickHandler","itemMouseEnter","clickItem","timeoutId","wrapper","debounce","getA11yStatusMessage"],"mappings":"kQACIA,EACkB,oBAAbC,SACH,KACAA,SAASC,eAAe,uBAE1BC,KAKJ,SAASC,EAAUC,OACXC,EAAeH,EAASA,EAASI,OAAS,KAAOF,IACnDC,YACaH,GAAUE,KAEbA,WAERG,EA+BR,cACMR,SACKA,WAEGC,SAASQ,cAAc,QACzBC,aAAa,KAAM,yBACnBA,aAAa,OAAQ,YACrBA,aAAa,YAAa,eAC1BA,aAAa,gBAAiB,yBACjCC,OAAOX,EAAUY,cACd,SACF,uBACE,aACA,gBACE,iBACD,aACC,iBACH,iBAEAC,KAAKC,YAAYd,GACnBA,EAnDKe,GAGLP,EAAIQ,aACLC,YAAYT,EAAIU,cAGbC,OAAOC,SAASC,QAAQ,SAACC,EAAYC,KACxCT,YASR,SAA2BT,EAAQkB,OAC3BC,EAAUD,IAAUpB,EAASI,OAAS,EAAI,QAAU,OAEpDkB,EAAWxB,SAASQ,cAAc,gBAC/BG,MAAMY,QAAUA,IAChBE,YAAcrB,EAEhBoB,EAhBWE,CAAkBL,EAAYC,MC1BlD,SAASK,EAAUC,GACjB,OAAa,MAANA,GAA4B,iBAAPA,IAAoC,IAAhBA,EAAGC,UAAkC,KAAhBD,EAAGC,UAG1E,SAASC,EAAYC,EAAUC,GAC7B,QAAIA,GAA2C,WAAbD,KAId,YAAbA,GAAuC,SAAbA,GAGnC,SAASE,EAAaL,EAAII,GACxB,GAAIJ,EAAGM,aAAeN,EAAGO,cAAgBP,EAAGQ,YAAcR,EAAGS,YAAa,CACxE,IAAI1B,EAAQ2B,iBAAiBV,EAAI,MACjC,OAAOE,EAAYnB,EAAM4B,UAAWP,IAA+BF,EAAYnB,EAAM6B,UAAWR,GAGlG,OAAO,EAGT,SAASS,EAAaC,EAAoBC,EAAkBC,EAAeC,EAAsBC,EAAoBC,EAAkBC,EAAgBC,GACrJ,OAAIF,EAAmBL,GAAsBM,EAAiBL,GAAoBI,EAAmBL,GAAsBM,EAAiBL,EACnI,EAGLI,EAAmBL,GAAsBO,EAAcL,GAAiBI,EAAiBL,GAAoBM,EAAcL,EACtHG,EAAmBL,EAAqBG,EAG7CG,EAAiBL,GAAoBM,EAAcL,GAAiBG,EAAmBL,GAAsBO,EAAcL,EACtHI,EAAiBL,EAAmBG,EAGtC,QAGM,SAAWI,EAAQC,GAChC,IAAIC,EAAaD,EAAQC,WACrBC,EAAQF,EAAQE,MAChBC,EAASH,EAAQG,OACjBC,EAAWJ,EAAQI,SACnBvB,EAA6BmB,EAAQnB,2BACrCwB,EAAoC,mBAAbD,EAA0BA,EAAW,SAAUE,GACxE,OAAOA,IAASF,GAGlB,IAAK5B,EAAUuB,GACb,MAAM,IAAIQ,UAAU,kBAOtB,IAJA,IAAIC,EAAmB3D,SAAS2D,kBAAoB3D,SAAS4D,gBACzDC,KACAC,EAASZ,EAENvB,EAAUmC,IAAWN,EAAcM,IAAS,CAGjD,IAFAA,EAASA,EAAOC,YAAcD,EAAOE,QAEtBL,EAAkB,CAC/BE,EAAOI,KAAKH,GACZ,MAGEA,IAAW9D,SAASY,MAAQqB,EAAa6B,KAAY7B,EAAajC,SAAS4D,kBAI3E3B,EAAa6B,EAAQ9B,IACvB6B,EAAOI,KAAKH,GAqBhB,IAjBA,IAAII,EAAgBC,OAAOC,eAAiBA,eAAeC,MAAQC,WAC/DC,EAAiBJ,OAAOC,eAAiBA,eAAeI,OAASC,YACjEC,EAAYP,OAAOQ,SAAWC,YAC9BC,EAAYV,OAAOW,SAAWC,YAE9BC,EAAwB9B,EAAO+B,wBAC/BC,EAAeF,EAAsBR,OACrCW,EAAcH,EAAsBX,MACpCe,EAAYJ,EAAsBK,IAClCC,EAAcN,EAAsBO,MACpCC,EAAeR,EAAsBS,OACrCC,EAAaV,EAAsBW,KAEnCC,EAAwB,UAAVvC,GAA+B,YAAVA,EAAsB+B,EAAsB,QAAV/B,EAAkBmC,EAAeJ,EAAYF,EAAe,EACjIW,EAA0B,WAAXvC,EAAsBoC,EAAaP,EAAc,EAAe,QAAX7B,EAAmBgC,EAAcI,EACrGI,KAEKxE,EAAQ,EAAGA,EAAQuC,EAAOvD,OAAQgB,IAAS,CAClD,IAAIyE,EAAQlC,EAAOvC,GAEf0E,EAAwBD,EAAMd,wBAC9BgB,EAAUD,EAAsBxB,OAChC0B,EAASF,EAAsB3B,MAC/B8B,EAAOH,EAAsBX,IAC7BE,EAAQS,EAAsBT,MAC9BE,EAASO,EAAsBP,OAC/BW,EAAQJ,EAAsBL,KAElC,GAAmB,cAAfvC,GAA8BgC,GAAa,GAAKM,GAAc,GAAKF,GAAgBjB,GAAkBe,GAAepB,GAAiBkB,GAAae,GAAQX,GAAgBC,GAAUC,GAAcU,GAASd,GAAeC,EAC5N,OAAOO,EAGT,IAAIO,EAAa/D,iBAAiByD,GAC9BO,EAAaC,SAASF,EAAWG,gBAAiB,IAClDC,EAAYF,SAASF,EAAWK,eAAgB,IAChDC,EAAcJ,SAASF,EAAWO,iBAAkB,IACpDC,EAAeN,SAASF,EAAWS,kBAAmB,IACtDC,EAAc,EACdC,EAAe,EACfC,EAAiB,gBAAiBlB,EAAQA,EAAMmB,YAAcnB,EAAM3D,YAAckE,EAAaK,EAAc,EAC7GQ,EAAkB,iBAAkBpB,EAAQA,EAAMqB,aAAerB,EAAM7D,aAAeuE,EAAYI,EAAe,EAErH,GAAIlD,IAAqBoC,EAErBgB,EADY,UAAV1D,EACYuC,EACK,QAAVvC,EACKuC,EAAcrB,EACT,YAAVlB,EACKZ,EAAaoC,EAAWA,EAAYN,EAAgBA,EAAgBkC,EAAWI,EAAchC,EAAYe,EAAaf,EAAYe,EAAcV,EAAcA,GAE9JU,EAAcrB,EAAiB,EAI7CyC,EADa,UAAX1D,EACauC,EACK,WAAXvC,EACMuC,EAAe3B,EAAgB,EAC1B,QAAXZ,EACMuC,EAAe3B,EAEfzB,EAAaiC,EAAWA,EAAYR,EAAeA,EAAeoC,EAAYK,EAAajC,EAAYmB,EAAcnB,EAAYmB,EAAeV,EAAaA,GAG9K4B,EAAcM,KAAKC,IAAI,EAAGP,EAAclC,GACxCmC,EAAeK,KAAKC,IAAI,EAAGN,EAAetC,OACrC,CAEHqC,EADY,UAAV1D,EACYuC,EAAcO,EAAOM,EAChB,QAAVpD,EACKuC,EAAcH,EAASoB,EAAeM,EACjC,YAAV9D,EACKZ,EAAa0D,EAAMV,EAAQQ,EAASQ,EAAWI,EAAeM,EAAiBvB,EAAaA,EAAcV,EAAcA,GAExHU,GAAeO,EAAOF,EAAU,GAAKkB,EAAkB,EAIrEH,EADa,UAAX1D,EACauC,EAAeO,EAAQE,EAClB,WAAXhD,EACMuC,GAAgBO,EAAQF,EAAS,GAAKe,EAAiB,EAClD,QAAX3D,EACMuC,EAAeN,EAAQoB,EAAcM,EAErCxE,EAAa2D,EAAOb,EAAOW,EAAQI,EAAYK,EAAcM,EAAgBpB,EAAcA,EAAeV,EAAaA,GAGxI,IAAIoC,EAAaxB,EAAMwB,WACnBC,EAAYzB,EAAMyB,UAGtB5B,GAAe4B,GAFfT,EAAcM,KAAKC,IAAI,EAAGD,KAAKI,IAAID,EAAYT,EAAahB,EAAM5D,aAAe8D,EAAUkB,KAG3FtB,GAAgB0B,GAFhBP,EAAeK,KAAKC,IAAI,EAAGD,KAAKI,IAAIF,EAAaP,EAAcjB,EAAM1D,YAAc6D,EAASe,KAK9FnB,EAAa7B,MACXrC,GAAImE,EACJV,IAAK0B,EACLpB,KAAMqB,IAIV,OAAOlB,GC3KL4B,EAAY,EAUhB,SAASC,EAAOC,SACO,mBAAPA,EAAoBA,EAAKC,EAGzC,SAASA,KA4BT,SAASC,EAAiBC,EAAQC,UACzBD,IAAWC,GAAUD,EAAOE,UAAYF,EAAOE,SAASD,GAwCjE,SAASE,+BAAwBC,gDACxB,SAACC,8BAAUC,0DAChBF,EAAIG,KAAK,sBACDC,gBAAGH,UAAUC,IAEjBD,EAAMI,yBACLJ,EAAMK,eAAe,gBACpBL,EAAMM,YAAYF,2BAgF5B,SAASG,EAAYC,EAAKC,aAClBC,MAAMC,QAAQH,GAA2CA,EAAI,GAAKA,IAC5DC,EACHA,EAEAD,EAQX,SAASI,EAAaC,UAEhBA,EAAQC,SAEyB,iBAArBD,EAAQC,SAGS,iBAAjBD,EAAQE,KAQ1B,SAASC,EAAgBH,UAEhBA,EAAQI,OAA6CJ,EAAQK,WAatE,IAAMC,GACJ,mBACA,aACA,SACA,eACA,QAMF,SAASC,QAAUC,4DACXC,cACItI,QAAQ,YACZqI,EAAMhB,eAAekB,OAChBA,GAAKF,EAAME,MAGfD,EAQT,SAASE,EAAkBxB,OAClByB,EAAgBzB,EAAhByB,IAAKC,EAAW1B,EAAX0B,eAERA,GAAW,IAAMA,GAAW,IAA+B,IAAzBD,EAAIE,QAAQ,iBACjCF,EAEVA,uiBC9NHG,yBAmGQX,0BACVY,YAAMZ,kBACAI,EAAQS,EAAKC,2BACCD,EAAKb,MAAMe,+BACrBF,EAAKb,MAAMgB,yBACPH,EAAKb,MAAMiB,+BACTJ,EAAKb,MAAMkB,6BAED,MAAtBd,EAAMe,iBACFC,WAAaP,EAAKb,MAAMqB,aAAajB,EAAMe,iBAE9Cf,MAAQA,sVAqCfkB,sCACOC,WAAWxJ,QAAQ,yBACTyJ,UAGVD,2BAkBPT,+BAASW,yDAAeC,KAAKtB,aACpBuB,OAAOC,KAAKH,GAAcI,OAAO,SAACzB,EAAOI,YACxCA,GAAOsB,EAAKC,iBAAiBvB,GAC/BsB,EAAK9B,MAAMQ,GACXiB,EAAajB,GACVJ,oBAWX2B,0BAAiBvB,eACYwB,IAApBN,KAAK1B,MAAMQ,gBAGpByB,4BAKMC,EAAYR,KAAKS,MAAMlL,cACL,MAAlByK,KAAKQ,YACKR,KAAKQ,eACiBF,IAAzBN,KAAK1B,MAAMkC,cACRR,KAAK1B,MAAMkC,WAElBA,eAMTE,8BAAqBnK,UACZyJ,KAAK1B,MAAMqC,YAAY1L,SAASC,eAAe8K,KAAKY,UAAUrK,iBAWvEsK,0CD7NF,SAAwBnI,EAAMoI,GACf,OAATpI,GAIYqI,EAAsBrI,YAC1BoI,QACH,qBACK,cAENzK,QAAQ,gBAAEQ,IAAAA,GAAIyD,IAAAA,IAAKM,IAAAA,OACtB6B,UAAYnC,IACZkC,WAAa5B,KCoNDoF,KAAKU,qBAAqBV,KAAKZ,WAAW4B,kBAClChB,KAAKiB,wBAI9BC,8BAAqBC,EAAQC,GACvBpB,KAAKZ,WAAWiC,YACbC,uBAAuBH,EAAQC,QAE/BG,yBAAoBjB,KAAYe,QAAQ,GAASD,iBAI1DE,gCAAuBE,EAAYJ,OAC3BK,EAAiBzB,KAAKO,eAAiB,OACzCkB,EAAiB,QAIjBC,EADuB1B,KAAKZ,WAAzB4B,iBAEW,OAAdU,MACUF,EAAa,GAAK,EAAIC,EAAiB,OAEjDE,EAAWD,EAAYF,EACvBG,EAAW,IACFF,EACFE,EAAWF,MACT,QAERF,oBAAoBI,EAAUP,iBAqKrCQ,oCAC+D5B,KAAKZ,WAA3D4B,IAAAA,iBAAkBtB,IAAAA,WAAYD,IAAAA,aAAc4B,IAAAA,OAC5C1B,EAAgBK,KAAK1B,MAArBqB,aACAG,EAAME,KAANF,GAEL+B,EAmBE7B,KAnBF6B,aACAC,EAkBE9B,KAlBF8B,qBACAC,EAiBE/B,KAjBF+B,cACAC,EAgBEhC,KAhBFgC,aACAC,EAeEjC,KAfFiC,cACAC,EAcElC,KAdFkC,aACAC,EAaEnC,KAbFmC,SACAC,EAYEpC,KAZFoC,UACAC,EAWErC,KAXFqC,WACAC,EAUEtC,KAVFsC,WACAC,EASEvC,KATFuC,kBACAC,EAQExC,KARFwC,sBACAjB,EAOEvB,KAPFuB,oBACAkB,EAMEzC,KANFyC,eACAC,EAKE1C,KALF0C,4HAKE1C,KAJF2C,oKAIE3C,KAHF4C,4BAGE5C,KAFF6C,wBAEE7C,KADF8C,2GAucJC,wCAOUC,EAAwB,SAAC7K,OAAQ8K,6DAC9BhO,EAAYiO,EAAK5E,MAAMqC,YAAvB1L,gBACCiO,EAAKjC,UAAWiC,EAAKC,WAAW5F,KACtC,mBACE6F,IACCrG,EAAiBqG,EAAajL,IAC5B8K,GACClG,EAAiBqG,EAAanO,EAASoO,mBAQ3CC,EAAc,aACbC,aAAc,GAEfC,EAAY,cACXD,aAAc,GAGYP,EAAsB3F,EAAMlF,SAC5B+K,EAAK9D,WAAWiC,UACxCsB,OAAOvE,KAAMa,EAAUwE,iBAAiBC,SAAU,kBACrDR,EAAK5E,MAAMqF,aAAaT,EAAKtB,yBAO7BgC,EAAe,aACYZ,EAC7B3F,EAAMlF,QACN,IAE6B+K,EAAK9D,WAAWiC,UACxCsB,OAAOvE,KAAMa,EAAUwE,iBAAiBI,YAAa,kBACxDX,EAAK5E,MAAMqF,aAAaT,EAAKtB,8BAK9BtD,MAAMqC,YAAYmD,iBAAiB,YAAaR,QAChDhF,MAAMqC,YAAYmD,iBAAiB,UAAWN,QAC9ClF,MAAMqC,YAAYmD,iBAAiB,aAAcF,QAEjDG,QAAU,aACRnE,0BACAoE,aAAaC,WACb3F,MAAMqC,YAAYuD,oBAAoB,YAAaZ,KACnDhF,MAAMqC,YAAYuD,oBAAoB,UAAWV,KACjDlF,MAAMqC,YAAYuD,oBAAoB,aAAcN,iBAK/DO,4BAAmBC,EAAWC,GAE1BrE,KAAKK,iBAAiB,iBACtBL,KAAK1B,MAAMgG,oBACTF,EAAU3E,aACVO,KAAK1B,MAAMmB,oBAGRqD,uBACG7D,EAAUwE,iBAAiBc,6CACrBvE,KAAK1B,MAAMqB,aAAaK,KAAK1B,MAAMmB,oBAI7C+E,OAC4BlE,IAAhCN,KAAK1B,MAAM0C,iBAAiChB,KAAKtB,MAAQsB,KAAK1B,MAC1DmG,OAC2BnE,IAA/B8D,EAAUpD,iBAAiCqD,EAAYD,EAGvDI,EAAQxD,mBAAqByD,EAAKzD,kBACjChB,KAAK0E,qBAED7D,qCAKAmD,4BAITW,qCACOZ,uBAGPa,sBACQC,EAAWjH,EAAYoC,KAAK1B,MAAMuG,SAAU/H,QAI7C4F,kBAKAb,aAAaiD,QAAS,OACtBjD,aAAakD,YAASzE,OACtBuB,aAAamD,sBAAmB1E,OAEhCyB,cAAc+C,QAAS,OAEvB7C,cAAc6C,QAAS,MACtB5G,EAAUN,EAAYiH,EAAS7E,KAAK4B,2BACrC1D,SACI,QAEL8B,KAAK6B,aAAaiD,cACf9E,KAAK6B,aAAamD,kBAuB7B,SAA6C9G,SAAU6G,IAAAA,OAC/CE,EAA6B,QAAXF,EAClBG,GAAejH,EAAaC,MAC9BgH,IAAgBD,QACZ,IAAIE,MACR,wFAEG,IAAKD,GAAeD,QACnB,IAAIE,gHACkGJ,WAGzG1G,EAAgBH,GAAS6G,SACtB,IAAII,iDACmCJ,kDApCL7G,EAAS8B,KAAK6B,cAE7C3D,EACF,GAAID,EAAaC,UAGfkH,EAAMC,aACXnH,EACA8B,KAAK6B,aAAaxD,EAAgBH,WAK9B,IAAIiH,MACR,gGAxgCgBG,aAAlBrG,EA0CGsG,sCACoB,yBACJ,uBACF,kBACJ,uBDoEnB,gBACElE,IAAAA,OACAmE,IAAAA,gBACA/F,IAAAA,aACAgG,IAAAA,YACAC,IAAAA,oBACA/F,IAAAA,oBAEK0B,EAQAoE,EAEOD,GAHeC,IAAgBC,EAQpC/F,EAAa6F,GAJRC,OACQ,IAAhBA,EAAoB,YAAc,qEAH7B,cARHhG,EACKE,EAAaF,GAEb,iBC9EK,mBACH,MAALkG,EACK,GAcFC,OAAOD,kBAED7I,qBACKA,eACNA,WACJA,WACAA,eACIA,sBACO,SAAC+I,EAAUC,UAASD,IAAaC,eAElC,oBAAX1M,UAEHA,oBACQ,SAACsF,EAAOqH,UAAeA,IA7EnC9G,EAgFGwE,0BACI,mCACA,0CACO,kDACA,qDACE,oDACH,+CACD,2CACH,wCACA,0CACE,mDACO,oDACP,2CACD,iEAEV,oEACU,gEAiBd3D,GAAKE,KAAK1B,MAAMwB,iBDrBT8F,OAAOjJ,UCsBdqJ,OAAShG,KAAK1B,MAAM0H,QAAahG,KAAKF,gBACtCmG,QAAUjG,KAAK1B,MAAM2H,SAAcjG,KAAKF,iBACxCoG,QAAUlG,KAAK1B,MAAM4H,SAAclG,KAAKF,iBACxCc,UAAYZ,KAAK1B,MAAMsC,WAAc,mBAAYuF,EAAKrG,YAAWvJ,QAEjE6P,MAAQ,UACR3F,cAMAD,UAAY,UACZkF,oBAAsB,OAEtB7F,mBAMAwG,mBAAqB,SAAC7I,EAAI8I,OAClBxG,EAAKyG,WAAW,aACf1G,WAAasG,EAAKtG,WAAW1J,OAAO,mBAAKwP,IAAM7F,SAEnDwG,KAEEzG,WAAW3G,KAAK4G,SA+DvB8C,aAAe,mBAAUuD,EAAK3F,UAAYgG,QAC1C3D,eAAiB,kBAAOsD,EAAK3F,UAAY,WAMzCe,oBAAsB,eACpBP,yDAAmBmF,EAAK7H,MAAMe,wBAC9B+B,8DAEkB3C,EAAU2C,KACvB0B,oBAAkB9B,oBAAqBI,UAsC9CqB,eAAiB,cACVK,+BAEa,gBACF,WACJ,GAEVjG,SAIJyF,WAAa,SAACwD,EAAM1E,EAAiBvE,KACjB4B,EAAU2C,KACvB0B,4BAEO,mBACUqD,EAAK7H,MAAMe,qCACfyG,aACFK,EAAK9F,iBAAiB,gBAC9B8F,EAAK7H,MAAMiB,kBACX4G,EAAK7H,MAAMqB,aAAamG,IACzB1E,GAELvE,SAIJ0F,kBAAoB,SAACkE,EAAWrF,EAAiBvE,OACzCiJ,EAAOK,EAAK1F,MAAMgG,GACZ,MAARX,KAGCxD,WAAWwD,EAAM1E,EAAiBvE,SAGzC2F,sBAAwB,SAACpB,EAAiBvE,UACjCsJ,EAAK5D,kBACV4D,EAAK/G,WAAW4B,iBAChBI,EACAvE,SAYJiG,iBAAmB,SAACiD,EAAYlJ,OAC1B6J,SAAgBC,SAEdC,KACAC,EAA6C,mBAAfd,SAO/Bc,GAAwBd,EAAWrI,eAAe,iBAChDY,MAAMwI,mBAAmBf,EAAWrG,gBACpCyG,EAAKvE,qBACLmE,IAGAI,EAAKY,SACV,cACUZ,EAAK/G,SAASV,OAClBsI,EAAgBH,EAChBd,EAAWrH,GACXqH,IAGYI,EAAK7H,MAAM2I,aAAavI,EAAOsI,OAOzCE,KAEAC,cAJWH,EAActJ,eAAe,kBAU5CsJ,EAAcvH,eAAiBf,EAAMe,iBAEvBuH,EAAcvH,gBAEhBrB,KACZ4I,EAAc5I,MAAQa,EAAUwE,iBAAiB2D,eAE5ClH,KAAK8G,GAAe3Q,QAAQ,YAG7BqI,EAAMI,KAASkI,EAAclI,OACdA,GAAOkI,EAAclI,IAQ5B,SAARA,MAGUA,GAAOkI,EAAclI,GAE9BqH,EAAK9F,iBAAiBvB,OACfA,GAAOkI,EAAclI,OAOjC+H,GACAG,EAActJ,eAAe,iBAExBY,MAAMwI,mBAAmBE,EAActH,gBACvCyG,EAAKvE,qBACLoF,IAIAE,GAET,aAESrK,KAIsBoD,OAAOC,KAAK0G,GAAkBrR,OAAS,KAE7D+I,MAAM+I,cAAcT,EAAkBT,EAAKvE,sBAG9C8E,KACGpI,MAAMgJ,SACTvB,EAAWtG,aACX0G,EAAKvE,2BAIWtB,IAAhBqG,KACGrI,MAAMiJ,SAASZ,EAAaR,EAAKvE,wBAInCtD,MAAMkJ,aAAaZ,EAAkBT,EAAKvE,8BAsErD6F,QAAU,mBAAStB,EAAKlF,UAAYvI,QAEpCmJ,aAAe,2IAEZmD,iBAAAA,oBADAD,OAAAA,aAAS,QAAU2C,oBAKf7F,aAAaiD,QAAS,IACtBjD,aAAakD,OAASA,IACtBlD,aAAamD,iBAAmBA,MAC9B3D,EAAU8E,EAAK/G,WAAfiC,wBAEJ0D,GAASoB,EAAKsB,UACfE,KAAM,aACN,iBAAiBtG,IACjB,iBAAiB,YACjB,aAAaA,EAAS8E,EAAKH,OAAS,OACpC,mBAAmBG,EAAKF,WACrByB,SAMPE,oCACYvK,KACFwK,qBACA1G,EAAS9D,EAAMyK,SAAW,EAAI,OAC/B5G,qBAAqBC,QAClBlC,EAAUwE,iBAAiBsE,qCAI7B1K,KACAwK,qBACA1G,EAAS9D,EAAMyK,UAAY,GAAK,OACjC5G,qBAAqBC,QAClBlC,EAAUwE,iBAAiBuE,iCAI/B3K,SAC+B2C,KAAKZ,WAAjCiC,IAAAA,OAAQL,IAAAA,oBACXK,GAA8B,MAApBL,EAA0B,GAChC6G,qBACA/B,EAAO9F,KAAKS,MAAMO,GAClBiH,EAAWjI,KAAKU,qBAAqBM,MAC/B,MAAR8E,GAAiBmC,GAAYA,EAASC,aAAa,wBAGlD1F,4BACGvD,EAAUwE,iBAAiB0E,iCAKhC9K,KACCwK,sBACDlF,OAAOvE,KAAMa,EAAUwE,iBAAiB2E,uBAMjDC,2BACKrI,KAAK4H,8BAEJvK,KACIwK,sBACDxF,YAAYjE,KAAMa,EAAUwE,iBAAiB6E,6BAItDxG,qBAAuB,2EACrByG,IAAAA,QAEAC,KADAC,UACAD,WACAE,IAAAA,QACAC,IAAAA,OACGjB,4DAEIrG,EAAU8E,EAAK/G,WAAfiC,OACDuH,WAMSzL,EAAqBoL,EAASpC,EAAK0C,8BACjC1L,EAAqBqL,EAAWrC,EAAK2C,8BACvC3L,EAAqBuL,EAASvC,EAAK4C,2BACpC5L,EAAqBwL,EAAQxC,EAAK6C,oBAE1CC,EAAgBvB,EAAKwB,YAAgBN,iBAEnC,cACA,sBACQvH,EAAS,aAAe,6BACrB,iBACF,GACZ4H,EACAvB,SAIPqB,mBAAqB,cAEblB,uBAGRiB,qBAAuB,gBACfhK,EAAMD,EAAkBxB,GAC1B8I,EAAKkC,sBAAsBvJ,MACxBuJ,sBAAsBvJ,GAAKqK,KAAKhD,EAAM9I,SAI/CwL,mBAAqB,cACbhB,iBAKJ1B,EAAK7H,MAAMqC,YAAY1L,SAASoO,gBAChC8C,EAAK7H,MAAMqC,YAAY1L,SAASY,QAE1BsC,OAAOiR,UASR/C,mBAAmB,kBACtBF,EAAK9D,YAAYjE,KAAMa,EAAUwE,iBAAiB4F,sBAKxDL,kBAAoB,gBACZM,EAAajM,EAAMlF,SAEpBkO,mBAAmB,WAEnBF,EAAK5C,aAC4C,MAAjD4C,EAAK7H,MAAMqC,YAAY1L,SAASoO,eAC/B8C,EAAK7H,MAAMqC,YAAY1L,SAASoO,cAAcvD,KAAOqG,EAAKD,SAC5DC,EAAK7H,MAAMqC,YAAY1L,SAASoO,gBAAkBiG,KAE7C3G,OAAOvE,KAAMa,EAAUwE,iBAAiB8F,qBASnDxH,cAAgB,sBACNyH,QAASrD,EAAKD,QAASpG,GAAIqG,EAAKF,SAAY3H,SAOtD2D,cAAgB,2EACduG,IAAAA,UACAG,IAAAA,OACApB,IAAAA,SACAkC,IAAAA,QAEG/B,KADHgC,8EAIIT,aAQ2C9C,EAAK/G,WAA7CM,IAAAA,WAAY2B,IAAAA,OAAQL,IAAAA,iBAEtB0G,EAAKwB,kBACR,QACiB/L,EACboK,EACAkC,EACAtD,EAAKwD,sBAEPnB,UAAWrL,EAAqBqL,EAAWrC,EAAKyD,uBAChDjB,OAAQxL,EAAqBwL,EAAQxC,EAAK0D,qDAiBvB,+BAEnBxI,GAAsC,iBAArBL,GAAiCA,GAAoB,EAClEmF,EAAKvF,UAAUI,GACf,qBACWK,EAAS8E,EAAKH,OAAS,uBACrBG,EAAKF,qBAGV,YACPvG,KACHyG,EAAKD,SACN+C,EACAvB,SAIPkC,oBAAsB,gBACd9K,EAAMD,EAAkBxB,GAC1ByB,GAAOqH,EAAKyB,gBAAgB9I,MACzB8I,gBAAgB9I,GAAKqK,KAAKhD,EAAM9I,SAIzCsM,mBAAqB,cACd7G,uBACG7D,EAAUwE,iBAAiBqG,oBACzB,aAGJzM,EAAMlF,OAAO4R,cAIrBC,uBAAmE,cAC5DlH,uBACG7D,EAAUwE,iBAAiBqG,oBACzB,aACIG,UAIhBJ,iBAAmB,aAEZxD,mBAAmB,eAChB6D,EACJ/D,EAAK7H,MAAMqC,YAAY1L,SAASoO,cAAc8G,QAAQC,QACrDjE,EAAKlF,WACJkF,EAAKlF,UAAU/D,SACbiJ,EAAK7H,MAAMqC,YAAY1L,SAASoO,eAEjC8C,EAAK5C,aAAgB2G,KACnBvH,OAAOvE,KAAMa,EAAUwE,iBAAiB4G,oBASnDC,QAAU,mBAASnE,EAAKhD,UAAYzK,QAEpCsJ,aAAe,iFAAE+C,OAAAA,aAAS,QAAOwF,IAAAA,IAAQjM,yCAEpCyG,GDxqBP,sCAAoB3H,gDACX,sCAAIE,2CACLjH,QAAQ,eACJmH,eAAMF,MCqqBFkN,CAAQD,EAAKpE,EAAKmE,WAC5B3C,KAAM,YACN,mBAAmBrJ,GAASA,EAAM,cAAgB,KAAO6H,EAAKF,UAC9DnG,GAAIqG,EAAKH,UACN1H,SAMP4D,aAAe,6EACbuI,IAAAA,YACAnH,IAAAA,YACAiF,IAAAA,QAEAhS,KADAkS,UACAlS,WACAuP,KAAAA,aD7kBJ,SAAsB4E,EAAQC,SACtB,IAAIxF,uBAAuBwF,uBAA6BD,OC4kBrDE,CAAa,eAAgB,UACjClD,6EAEWpH,IAAV/J,KACGkK,MAAMvH,KAAK4M,KACRK,EAAK1F,MAAMzB,QAAQ8G,MAEtBrF,MAAMlK,GAASuP,MAMhB+E,EAEFtC,EAEEK,mBAISzL,EAAqBsN,EAAa,WACzClU,IAAU4P,EAAK/G,WAAW4B,qBAGzBO,oBAAoBhL,QACjB0I,EAAUwE,iBAAiBqH,mBAO9BpG,gBAAiB,IACjB2B,mBAAmB,kBAAOF,EAAKzB,gBAAiB,GAAQ,oBAElDvH,EAAqBmG,EAAa,cAIvCuE,qBAvBJ,QAyBW1K,EAAqB0N,EAAoB,aACjDtI,kBAAkBhM,QACf0I,EAAUwE,iBAAiBsH,iBAKjC9B,EAAgBvB,EAAKwB,YAAgBN,eAGrCzC,EAAKvF,UAAUrK,QACb,yBACW4P,EAAK/G,WAAWK,eAAiBqG,GAC/CmD,EACAvB,SAKPhF,WAAa,aACNjC,eAGPkC,MAAQ,eAACvB,4DAAsBvE,iBACX4B,EAAU2C,KACvB0B,iBACH,gBAAErD,IAAAA,+BACQ,mBACU0G,EAAK7H,MAAMe,mCACjB8G,EAAK7H,MAAMqB,aAAaF,IACjC2B,IAELvE,SAIJwF,WAAa,eAACjB,4DAAsBvE,iBAChB4B,EAAU2C,KACvB0B,iBACH,gBAAEzB,IAAAA,iBACQA,QAASA,GAAWD,IAE9B,WACmB+E,EAAK/G,WAAfiC,UAGAE,yBAAoBjB,EAAWc,KAE/BvE,aAKbsF,SAAW,cACJW,kBAAkBzB,QAAQ,GAAOxE,SAGxCuF,UAAY,cACLU,kBAAkBzB,QAAQ,GAAQxE,SAGzCmH,aD/0BF,SAAkBxG,EAAI8I,OAChB0E,kBAEK/G,IACH+G,gBACWA,YAIRC,+BAAW3N,+CAENiJ,WAAW,aACT,oBACNjJ,IACLgJ,YAGGrC,OAASA,EAEVgH,EC4zBQC,CAAS,eAChBxM,EAAQyH,EAAK/G,WACb0G,EAAOK,EAAK1F,MAAM/B,EAAMsC,kBACxByE,EAAcU,EAAK5F,eACnBlL,EAAS8Q,EAAK7H,MAAM6M,qCACVhF,EAAK7H,MAAMqB,iCACJwG,EAAKT,kDAETI,GACdpH,MAEAgH,oBAAsBD,IAEbpQ,IACb,mCDlxBL,aACc"}